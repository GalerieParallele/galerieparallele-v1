generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  avatarURL  String?   @db.Text
  email      String    @unique
  lastname   String    @db.VarChar(255)
  firstname  String    @db.VarChar(255)
  street     String    @db.VarChar(255)
  city       String    @db.VarChar(255)
  postalCode String    @db.VarChar(255)
  phone      String    @db.VarChar(255)
  password   String    @db.VarChar(255)
  roles      Json      @default("[\"ROLE_USER\"]")
  Artist     Artist?
  Articles   Article[]
}

model SaveTheDate {
  id Int @id @default(autoincrement())

  title    String   @db.VarChar(255)
  content  String   @db.Text
  date     DateTime
  photoURL String   @db.Text

  artistId Int
  Artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.Text
  private   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userid Int?
  User   User? @relation(fields: [userid], references: [id], onDelete: SetNull)
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  ArtistTag ArtistTag[]
  OeuvreTag OeuvreTag[]
}

model Artist {
  id Int @id @default(autoincrement())

  tva   String @unique
  siret String @unique

  pseudo String?

  bio String? @db.Text

  instagram String?
  facebook  String?
  linkedin  String?
  website   String?

  ArtistTag    ArtistTag[]
  SaveTheDate  SaveTheDate[]
  Exposition   Exposition[]
  ArtistOeuvre ArtistOeuvre[]

  userid Int  @unique
  User   User @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model ArtistTag {
  id       Int    @id @default(autoincrement())
  artistId Int
  tagId    Int
  Artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  Tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("artist_tag")
}

model Oeuvre {
  id          Int            @id @default(autoincrement())
  name        String
  description String         @db.Text
  OeuvreTag   OeuvreTag[]
  Artists     ArtistOeuvre[]
}

model OeuvreTag {
  id       Int    @id @default(autoincrement())
  oeuvreId Int
  tagId    Int
  Oeuvre   Oeuvre @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)
  Tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("oeuvre_tag")
}

model ArtistOeuvre {
  artistId Int
  oeuvreId Int
  Artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  Oeuvre   Oeuvre @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)

  @@id([artistId, oeuvreId])
}

model Exposition {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  date        DateTime
  photoURL    String   @db.Text
  artistId    Int
  Artist      Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
}
