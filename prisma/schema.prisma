generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model ----------------------------------------------------

model User {
  id Int @id @default(autoincrement())

  email    String @unique
  password String @db.VarChar(255)

  lastname  String @db.VarChar(255)
  firstname String @db.VarChar(255)

  street     String @db.VarChar(255)
  city       String @db.VarChar(255)
  postalCode String @db.VarChar(255)

  phone String @db.VarChar(255)

  roles Json @default("[\"ROLE_USER\"]")

  avatarURL String? @db.Text

  // Legal information ----------------------------

  societe       String?
  adrNumVoie    String?
  adrRue        String?
  adrVille      String?
  adrCodePostal String?

  siret String? @unique
  tva   String? @unique

  // --------------------------------------------

  artist Artist?

  articles Article[]
}

// --------------------------------------------------------------

// Article model -------------------------------------------------

model Article {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.Text
  private   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tags ArticleTag[]

  editorId Int?
  editor   User? @relation(fields: [editorId], references: [id], onDelete: SetNull)
}

model ArticleTag {
  articleId Int
  tagId     Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
}

// --------------------------------------------------------------

// Artist model --------------------------------------------------

model Artist {
  id Int @id @default(autoincrement())

  pseudo String?

  nationality String?

  bio String? @db.Text

  // Social networks ----------------------------

  instagram String?
  facebook  String?
  linkedin  String?
  website   String?

  // --------------------------------------------

  // Visibility ----------------------------

  atTheTop Boolean @default(false) // Artiste à la une

  private Boolean @default(true)

  // --------------------------------------------

  // Legal information ----------------------------

  numMaisonsDesArtistes String?
  numSecuriteSociale    String?
  tauxTva               String?

  societe       String?
  adrNumVoie    String?
  adrRue        String?
  adrVille      String?
  adrCodePostal String?

  siret String? @unique
  tva   String? @unique

  // --------------------------------------------

  userid Int  @unique
  user   User @relation(fields: [userid], references: [id], onDelete: Cascade)

  tag         ArtistTag[]
  saveTheDate ArtistSaveTheDate[]
  exposition  ArtistExposition[]
  oeuvre      ArtistOeuvre[]
  portrait    ArtistPortrait[]
  recompense  ArtistRecompense[]
}

model ArtistExposition {
  id          Int     @id @default(autoincrement())
  name        String
  description String? @db.Text
  year        Int
  artistId    Int
  artist      Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model ArtistTag {
  artistId Int
  tagId    Int
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([artistId, tagId])
}

model ArtistPortrait {
  id         Int      @id @default(autoincrement())
  artistId   Int
  portraitId Int
  artist     Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  portrait   Portrait @relation(fields: [portraitId], references: [id], onDelete: Cascade)
}

model ArtistSaveTheDate {
  id Int @id @default(autoincrement())

  title    String   @db.VarChar(255)
  content  String   @db.Text
  date     DateTime @default(now())
  photoURL String   @db.Text

  artistId Int
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model ArtistRecompense {
  id Int @id @default(autoincrement())

  title   String @db.VarChar(255)
  content String @db.Text

  artistId Int
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

// --------------------------------------------------------------

// Oeuvre model --------------------------------------------------

model Oeuvre {
  id   Int    @id @default(autoincrement()) // ID Unique de l'oeuvre
  name String @unique

  description String? @db.Text // Description de l'oeuvre
  anecdote    String? @db.Text // Anecdote de l'oeuvre

  hauteur    Float // Hauteur de l'oeuvre
  longueur   Float // Longueur de l'oeuvre
  profondeur Float? // Largeur de l'oeuvre

  orientation OrientationType @default(NO_DEFINED) // Orientation de l'oeuvre

  prix Float @default(0) // Prix de l'oeuvre

  private Boolean @default(true) // Oeuvre privée

  atTheTop Boolean @default(false) // Oeuvre à la une

  artsperURL String @default("https://www.artsper.com/fr/galeries-d-art/france/10431/la-galerie-parallele?section=artwork&page=1") // URL Artsper de l'oeuvre

  numerotation Int?    @default(1) // Numérotation de l'oeuvre
  limitation   Int?    @default(1) // Limitation de l'oeuvre
  support      String? // Support de l'oeuvre
  technique    String // Technique de l'oeuvre
  encadrement  String? // Encadrement de l'oeuvre
  signature    String? // Signature de l'oeuvre

  Artists            ArtistOeuvre[] // Artistes de l'oeuvre
  UnknowArtistOeuvre ArtistUnknowOeuvre[] // Artistes inconnus de l'oeuvre

  tag      OeuvreTag[] // Tags de l'oeuvre
  type     OeuvreTypes[] // Types de l'oeuvre
  images   OeuvreImage[] // Images de l'oeuvre
  couleurs OeuvreCouleur[] // Couleurs de l'oeuvre
}

enum OrientationType {
  PORTRAIT
  PAYSAGE
  CARRE
  NO_DEFINED
}

model Couleur {
  hexa    String          @id @unique
  name    String          @unique
  oeuvres OeuvreCouleur[]
}

model OeuvreCouleur {
  oeuvreId Int
  hexa     String
  oeuvre   Oeuvre  @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)
  couleur  Couleur @relation(fields: [hexa], references: [hexa], onDelete: Cascade)

  @@id([oeuvreId, hexa])
}

model OeuvreImage {
  id       Int    @id @default(autoincrement()) // ID Unique de l'image
  mediaURL String @unique @db.Text // URL de l'image
  oeuvreId Int // ID de l'oeuvre
  oeuvre   Oeuvre @relation(fields: [oeuvreId], references: [id], onDelete: Cascade) // Oeuvre de l'image
  position Int // Position de l'image
}

model TypesOeuvre {
  id      Int           @id @default(autoincrement()) // ID Unique du type
  name    String        @unique // Nom du type
  oeuvres OeuvreTypes[] // Types de l'oeuvre
}

model OeuvreTypes {
  oeuvreId     Int
  typeOeuvreId Int
  oeuvre       Oeuvre      @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)
  type         TypesOeuvre @relation(fields: [typeOeuvreId], references: [id], onDelete: Cascade)

  @@id([oeuvreId, typeOeuvreId])
}

model OeuvreTag {
  oeuvreId Int
  tagId    Int
  oeuvre   Oeuvre @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([oeuvreId, tagId])
}

model ArtistOeuvre {
  artistId Int
  oeuvreId Int
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  oeuvre   Oeuvre @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)

  @@id([artistId, oeuvreId])
}

model ArtistUnknowOeuvre {
  artistId Int
  oeuvreId Int
  artist   ArtistUnknow @relation(fields: [artistId], references: [id], onDelete: Cascade)
  oeuvre   Oeuvre       @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)

  @@id([artistId, oeuvreId])
}

// --------------------------------------------------------------

// ArtistUnknow model --------------------------------------------

model ArtistUnknow {
  id     Int                  @id @default(autoincrement())
  name   String               @unique
  oeuvre ArtistUnknowOeuvre[]
}

// --------------------------------------------------------------

// Tag model -----------------------------------------------------

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  artists  ArtistTag[]
  oeuvres  OeuvreTag[]
  articles ArticleTag[]
}

// --------------------------------------------------------------

// Portrait model ------------------------------------------------

model Portrait {
  id             Int              @id @default(autoincrement())
  question       String           @db.Text
  answer         String           @db.Text
  private        Boolean          @default(false)
  ArtistPortrait ArtistPortrait[]
}

// --------------------------------------------------------------

// Actuality model ------------------------------------------------

model Actuality {
  id Int @id @default(autoincrement())

  title    String  @db.VarChar(255)
  content  String  @db.Text
  photoURL String  @db.Text
  private  Boolean @default(false)
}

// --------------------------------------------------------------
