generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model ----------------------------------------------------

model User {
  id         Int       @id @default(autoincrement())
  avatarURL  String?   @db.Text
  email      String    @unique
  lastname   String    @db.VarChar(255)
  firstname  String    @db.VarChar(255)
  street     String    @db.VarChar(255)
  city       String    @db.VarChar(255)
  postalCode String    @db.VarChar(255)
  phone      String    @db.VarChar(255)
  password   String    @db.VarChar(255)
  roles      Json      @default("[\"ROLE_USER\"]")
  Artist     Artist?
  Articles   Article[]
}

// --------------------------------------------------------------

// Save the date model -------------------------------------------

model SaveTheDate {
  id Int @id @default(autoincrement())

  title    String   @db.VarChar(255)
  content  String   @db.Text
  date     DateTime
  photoURL String   @db.Text

  artistId Int
  Artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

// --------------------------------------------------------------

// Article model -------------------------------------------------

model Article {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.Text
  private   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userid Int?
  User   User? @relation(fields: [userid], references: [id], onDelete: SetNull)
}

// --------------------------------------------------------------

// Tag model -----------------------------------------------------

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  ArtistTag ArtistTag[]
  OeuvreTag OeuvreTag[]
}

// --------------------------------------------------------------

// Artist model --------------------------------------------------

model Artist {
  id Int @id @default(autoincrement())

  tva   String? @unique
  siret String? @unique

  pseudo String?

  bio String? @db.Text

  instagram String?
  facebook  String?
  linkedin  String?
  website   String?

  ArtistTag    ArtistTag[]
  SaveTheDate  SaveTheDate[]
  Exposition   Exposition[]
  ArtistOeuvre ArtistOeuvre[]

  userid Int  @unique
  User   User @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model Exposition {
  id          Int     @id @default(autoincrement())
  name        String
  description String? @db.Text
  year        Int
  artistId    Int
  Artist      Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model ArtistTag {
  id       Int    @id @default(autoincrement())
  artistId Int
  tagId    Int
  Artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  Tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("artist_tag")
}

// --------------------------------------------------------------

// Oeuvre model --------------------------------------------------

model Oeuvre {
  id   Int    @id @default(autoincrement()) // ID Unique de l'oeuvre
  name String // Nom de l'oeuvre

  description String? @db.Text // Description de l'oeuvre
  anecdote    String? @db.Text // Anecdote de l'oeuvre

  hauteur  Int // Hauteur de l'oeuvre
  longueur Int // Longueur de l'oeuvre
  largeur  Int? // Largeur de l'oeuvre

  numerotation Int // Num√©rotation de l'oeuvre
  support      String // Support de l'oeuvre
  technique    String // Technique de l'oeuvre
  encadrement  String // Encadrement de l'oeuvre
  signature    String // Signature de l'oeuvre

  Artists            ArtistOeuvre[] // Artistes de l'oeuvre
  UnknowArtistOeuvre UnknowArtistOeuvre[] // Artistes inconnus de l'oeuvre

  OeuvreTag       OeuvreTag[] // Tags de l'oeuvre
  CompositionType CompositionType[] // Types de l'oeuvre
  OeuvreImage     OeuvreImage[] // Images de l'oeuvre
}

model OeuvreImage {
  id       Int    @id @default(autoincrement()) // ID Unique de l'image
  mediaURL String @db.Text // URL de l'image
  oeuvreId Int // ID de l'oeuvre
  Oeuvre   Oeuvre @relation(fields: [oeuvreId], references: [id], onDelete: Cascade) // Oeuvre de l'image
}

model TypeOeuvre {
  id              Int               @id @default(autoincrement()) // ID Unique du type
  name            String            @unique // Nom du type
  CompositionType CompositionType[] // Types de l'oeuvre
}

model CompositionType {
  id           Int        @id @default(autoincrement())
  oeuvreId     Int
  typeOeuvreId Int
  Oeuvre       Oeuvre     @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)
  TypeOeuvre   TypeOeuvre @relation(fields: [typeOeuvreId], references: [id], onDelete: Cascade)
}

model OeuvreTag {
  id       Int    @id @default(autoincrement())
  oeuvreId Int
  tagId    Int
  Oeuvre   Oeuvre @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)
  Tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("oeuvre_tag")
}

model ArtistOeuvre {
  artistId Int
  oeuvreId Int
  Artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  Oeuvre   Oeuvre @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)

  @@id([artistId, oeuvreId])
}

model UnknowArtistOeuvre {
  artistId Int
  oeuvreId Int
  Artist   UnknowArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  Oeuvre   Oeuvre       @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)

  @@id([artistId, oeuvreId])
}

// --------------------------------------------------------------

// UnknowArtist model --------------------------------------------

model UnknowArtist {
  id                 Int                  @id @default(autoincrement())
  name               String
  UnknowArtistOeuvre UnknowArtistOeuvre[]
}

// --------------------------------------------------------------
